// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: snakes.proto

package ru.levachev.messages;

/**
 * Protobuf enum {@code snakes.Direction}
 */
public enum Direction
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <pre>
   * Вверх (в отрицательном направлении оси y)
   * </pre>
   *
   * <code>UP = 1;</code>
   */
  UP(1),
  /**
   * <pre>
   * Вниз (в положительном направлении оси y)
   * </pre>
   *
   * <code>DOWN = 2;</code>
   */
  DOWN(2),
  /**
   * <pre>
   * Влево (в отрицательном направлении оси x)
   * </pre>
   *
   * <code>LEFT = 3;</code>
   */
  LEFT(3),
  /**
   * <pre>
   * Вправо (в положительном направлении оси x)
   * </pre>
   *
   * <code>RIGHT = 4;</code>
   */
  RIGHT(4),
  ;

  /**
   * <pre>
   * Вверх (в отрицательном направлении оси y)
   * </pre>
   *
   * <code>UP = 1;</code>
   */
  public static final int UP_VALUE = 1;
  /**
   * <pre>
   * Вниз (в положительном направлении оси y)
   * </pre>
   *
   * <code>DOWN = 2;</code>
   */
  public static final int DOWN_VALUE = 2;
  /**
   * <pre>
   * Влево (в отрицательном направлении оси x)
   * </pre>
   *
   * <code>LEFT = 3;</code>
   */
  public static final int LEFT_VALUE = 3;
  /**
   * <pre>
   * Вправо (в положительном направлении оси x)
   * </pre>
   *
   * <code>RIGHT = 4;</code>
   */
  public static final int RIGHT_VALUE = 4;


  public final int getNumber() {
    return value;
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @Deprecated
  public static Direction valueOf(int value) {
    return forNumber(value);
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   */
  public static Direction forNumber(int value) {
    switch (value) {
      case 1: return UP;
      case 2: return DOWN;
      case 3: return LEFT;
      case 4: return RIGHT;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<Direction>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      Direction> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<Direction>() {
          public Direction findValueByNumber(int number) {
            return Direction.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return Snakes.getDescriptor().getEnumTypes().get(2);
  }

  private static final Direction[] VALUES = values();

  public static Direction valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private Direction(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:snakes.Direction)
}

